// This file proves some lemmas on classical logic.

import connectives.mdln
import false.mdln

// The law of excluded middle.  Note, this is a definition, not an
// assumption!  If you want to prove a theorem in classical logic,
// formulate it as "Excluded_middle -> <what you want>".

def Excluded_middle: Prop := (P: Prop) -> Or P (Not P)

// The following proves that the following axioms are equivalent:
// Excluded_middle:              (1) ∀P, P ∨ ¬P
// Double_negation_elimination:  (2) ∀P, ¬¬P → P
// Implication_as_or:            (3) ∀P,Q, (P → Q) → (¬P ∨ Q)
// Peirce:                       (4) ∀P,Q, ((P → Q) → P) → P
// Proof by:
//   (1) => (2), (2) => (3), (3) => (1)
//   (1) => (4), (4) => (1)

def Double_negation_elimination: Prop := (P : Prop) -> ((Not (Not P)) -> P)

def Implication_as_or: Prop := (P Q : Prop) -> (P -> Q) -> Or (Not P) Q

def Peirce: Prop := (P Q: Prop) -> ((P -> Q) -> P) -> P

// Lemmas (TODO: put in namespace when that works)
def excluded_middle_implies_double_negation_elimination: (Excluded_middle -> Double_negation_elimination) :=
  fun excl : Excluded_middle, P: Prop, notnotP : (Not (Not P)) =>
    (excl P) // Apply P \/ ~P
      P // ... to prove P
      (fun p: P => p) // P case: P -> P is trivial
      // ~P case by contradiction with ~~P
      (fun notP: (Not P) =>
        (exfalso P (notnotP notP)))

def double_negation_elimination_implies_implication_as_or: (Double_negation_elimination -> Implication_as_or) :=
  (fun elim: Double_negation_elimination, P Q: Prop, PtoQ : (P -> Q) =>
    elim (Or (Not P) Q) // Prove ~P \/ Q by ~~(~P \/ Q)
      (fun H: Not (Or (Not P) Q) => // Assume ~(~P \/ Q) and prove False
        (fun p : P, qf: Not Q => qf (PtoQ p)) // From lemmas P and ~Q, prove False by P, P -> Q, Q -> False
        (elim P // Prove P by ~~P
          (fun HP: (Not P) => // Assume ~P, prove False
            H (or_intro_l (Not P) Q HP))) // Deduce False from ~(~P \/ Q)
        (fun q : Q => // Assume Q, prove False.
          H (or_intro_r (Not P) Q q)))) // Deduce False from ~(~P \/ Q)

def implication_as_or_implies_excluded_middle: Implication_as_or -> Excluded_middle :=
  (fun imp2or : Implication_as_or, P: Prop => // Let's prove ~P \/ P
    or_comm (Not P) P // Trivially follows from P \/ ~P
      (imp2or P P (fun p: P => p))) // P -> P, therefore ~P \/ P

// Boilerplate: deduce (1) <=> (2) from (1) => (2) => (3) => (1)
def excluded_middle_iff_double_negation_elimination: Iff Excluded_middle Double_negation_elimination :=
  (iff_intro
     Excluded_middle
     Double_negation_elimination
     excluded_middle_implies_double_negation_elimination
     (fun elim: Double_negation_elimination =>
     implication_as_or_implies_excluded_middle
       (double_negation_elimination_implies_implication_as_or elim)))

// Boilerplate: deduce (1) <=> (3) from (1) => (2) => (3) => (1)
def excluded_middle_iff_implication_as_or: Iff Excluded_middle Implication_as_or :=
  (iff_intro
    Excluded_middle
    Implication_as_or
    (fun excl: Excluded_middle =>
      double_negation_elimination_implies_implication_as_or
        (excluded_middle_implies_double_negation_elimination excl))
     implication_as_or_implies_excluded_middle)

def excluded_middle_implies_peirce: Excluded_middle -> Peirce :=
  (fun excl: Excluded_middle, P Q: Prop, H: ((P -> Q) -> P) =>
    (excl P) // Eliminate from P \/ ~P
      P // To prove P
      (fun p: P => p) // P -> P is trivial
      // ~P -> P
      (fun nP: Not P =>
        H // Prove P by H
          // Need to prove P -> Q
          (fun p: P =>
            // We have P and ~P, we can prove anything.
            exfalso Q (nP p))))

def peirce_implies_excluded_middle: Peirce -> Excluded_middle :=
  (fun peirce: Peirce, P: Prop =>
    // Specialize Peirce's law:
    // (((P \/ ~P) -> False) -> (P \/ ~P)) -> (P \/ ~P)
    // Thus we can prove P \/ ~P by
    // ((P \/ ~P) -> False) -> (P \/ ~P)
    (peirce (Or P (Not P)) False)
      (fun H: ((Or P (Not P)) -> False) => // assume (P \/ ~P) -> False
        // We want to prove P \/ ~P. It suffices to prove ~P.
        or_intro_r P (Not P)
          // Prove ~P.
          (fun p: P => // Assume P, deduce False
            // We know P \/ ~P -> False, and we can prove
            // P \/ ~P with P.
            H (or_intro_l P (Not P) p))))

// Boilerplate: deduce (1) <=> (4) from (1) => (4) => (1)
def excluded_middle_iff_peirce: Iff Excluded_middle Peirce :=
  (iff_intro Excluded_middle Peirce
     excluded_middle_implies_peirce
     peirce_implies_excluded_middle)
